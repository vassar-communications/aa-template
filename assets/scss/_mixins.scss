@mixin break($break, $min-or-max: "min") {
  /*	Sets up a media query. This expects that all of a project's breakpoints will
	    be stored in a map named $breakpoints, as follows:
$breakpoints: (
	"small": 30em,
	"medium": 50em,
	"large": 70em
);
	*/

  $screen-size: map-get($vassar__breakpoints, $break);
  @media screen and (#{$min-or-max}-width: $screen-size) {
    @content;
  }
}


@mixin background-image( $has-shim:false ) {
  & {
    position: relative;

    &:before, &:after {
      position: absolute;
      content: '';
      width: 100%;
      height: 100%;
    }
    @if $has-shim {
      &:before {
        position: absolute;
        content: '';
        width: 100%;
        height: var(--bg-shim-height, 100%);
        background: var(--bg-shim-background);
        bottom: 0;
        z-index: 10;
      }
    }

    &:after {
      background-image: var(--bg-image);
      background-size: cover;
      position: fixed;
//      background-attachment: fixed;
      top: 0;
      left: 0;
    }
  }
}





@mixin breakpoints(
  $prop,
  $prefix,
  $designator,
  $value,
  $directional: false,
  $child: false
) {
  @each $breakpoint, $width in $vassar__breakpoints {
    @media only screen and (min-width: #{$width}) {
      .#{$prefix}-#{$breakpoint}-#{$designator} {
        #{$prop}: #{$value};
      }
      @if $directional == true {
        @include directions(
          #{$prefix}-#{$designator}\@#{$breakpoint},
          $prop,
          var(--#{$prefix}-#{$designator})
        );
      }
    }
  }
}

@mixin inner-widths($widths) {

  :root {
    @each $item, $value in $widths {
      --w-#{$item}: #{$value};
    }
  }
  @each $item, $value in $widths {
    .w-#{$item} {
      width: #{$value};
    }
    @include breakpoints("width", "w", #{$item}, #{$value});
  }
}

@mixin vassar__makeRules($list, $prop, $prefix, $directional: false, $child: false) {
  :root {
    //  For some classes, like padding, we'll want a padding-0 class to
    //  remove all padding. But there are others, like max-width, where
    //  having a mw-0 class really doesn't make sense.

    //  I think -0 should only be used in cases where styling is being
    //  completely removed; you wouldn't want a font-size-0 class that
    //  represents the largest font-size (think how Bootstrap's utility class
    //  sizes go from 1 through 6, in descending order).

    //  So I'm handling it this way: -0 classes are only generated if a list
    //  begins with 0. Otherwise, the first generated class will always be
    //  a XXX-1.

    $i: 1;
    @if nth($list, 1) == 0 {
      $i: 0;
    }

    @each $item in $list {
      --#{$prefix}-#{$i}: #{$item};
      $i: $i + 1;
    }
  }

  $i: 1;
  @if nth($list, 1) == 0 {
    $i: 0;
  }

  @each $item in $list {
    .#{$prefix}-#{$i} {
      --current-#{$prop}: var(--#{$prefix}-#{$i});
      #{$prop}: var(--#{$prefix}-#{$i});
    }

    @if $directional == true {
      @include directions(#{$prefix}-#{$i}, $prop, var(--#{$prefix}-#{$i}));
    }

    @if $child != false {
      .#{$prefix}-inner-#{$i} #{$child} {
        #{$prop}: var(--#{$prefix}-#{$i});
      }
      @include breakpoints($prop, #{$prefix}, $i, $item, $directional);
    }

    @include breakpoints($prop, $prefix, $i, $item, $directional);

    $i: $i + 1;
  }
}
